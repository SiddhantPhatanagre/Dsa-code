#include<iostream>
#include<ctype.h>
#include<string.h>
#define hash(x) x%10
using namespace std;

typedef struct node
{
    long int mob;
    int chain;
    char name[10];
}node;

class Hash
{
public:
    node data[10];
    int i;

    void init()
    {
        for (i = 0; i < 10; i++)
        {
            data[i].mob = -1;
            data[i].chain = -1;
            strcpy(data[i].name, "-1");
        }
    }
    void disp()
    {
        cout << "\nloc\tmobile\tname\tchain";
        for (i = 0; i < 10; i++)
        {
            cout << "\n" << i << "\t" << data[i].mob << "\t" << data[i].name << "\t" << data[i].chain;
        }
    }

    int isfull()
    {
        for (i = 0; i < 10; i++)
        {
            if ((data[i].mob) == -1)
                return 0;
        }
        return 1;
    }

    void insert()
    {
        node s;
        int loc, pred;
        if (isfull())
        {
            cout << "\nHash table is full";
            return;
        }
        cout << "\nEnter the mobile no and the name:";
        cin >> s.mob >> s.name;
        s.chain = -1;
        loc = hash(s.mob);

        if (data[loc].mob == -1)
        {
            data[loc] = s;
        }
        else
        {
            // Linear probing with replacement
            int start_loc = loc;
            while (data[loc].mob != -1 && loc != start_loc)
            {
                loc = (loc + 1) % 10;
            }

            if (data[loc].mob == -1)
            {
                data[loc] = s;
            }
            else
            {
                // Handle replacement by moving the replaced node to its appropriate place
                while (data[loc].chain != -1)
                {
                    loc = data[loc].chain;
                }
                pred = loc;
                while (data[loc].mob != -1)
                {
                    loc = (loc + 1) % 10;
                }
                data[loc] = s;
                data[pred].chain = loc;
            }
        }
    }
};
int main()
{
    Hash h;
    h.init();
    h.disp();
    while (1)
    {
        h.insert();
        h.disp();
    }
    return 0;
}
